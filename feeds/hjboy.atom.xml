<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>hujunblog</title><link href="http://dnfhujun.github.io/" rel="alternate"></link><link href="http://dnfhujun.github.io/feeds/hjboy.atom.xml" rel="self"></link><id>http://dnfhujun.github.io/</id><updated>2014-12-23T00:00:00+08:00</updated><entry><title>Python测试接口脚本</title><link href="http://dnfhujun.github.io/pythonce-shi-jie-kou-jiao-ben.html" rel="alternate"></link><updated>2014-12-23T00:00:00+08:00</updated><author><name>hjboy</name></author><id>tag:dnfhujun.github.io,2014-12-23:pythonce-shi-jie-kou-jiao-ben.html</id><summary type="html">&lt;p&gt;闲来时间写了下接口测试的脚本，记录下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="nb"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://127.0.0.1/login.do&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://127.0.0.1/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://tel.zhenai.com/login.do&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://tel.zhenai.com/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;


&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;forward&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;loginWorkerId&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;110&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;loginPsw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c571f61253a724da5ec1215380c45ed3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sidSession&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# sid = re.search(r&amp;#39;sid=(.*?)&amp;amp;&amp;#39;,session.post(login_url,data=params,verify=False).url).group(1);&lt;/span&gt;
        &lt;span class="c"&gt;# print sid;&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sidSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queryAllot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sale/query-allot.do&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;memberId=61180220&amp;amp;phone=&amp;amp;email=&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;queryAllot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>mysql实用事项</title><link href="http://dnfhujun.github.io/mysqlshi-yong-shi-xiang.html" rel="alternate"></link><updated>2014-12-10T00:00:00+08:00</updated><author><name>hjboy</name></author><id>tag:dnfhujun.github.io,2014-12-10:mysqlshi-yong-shi-xiang.html</id><summary type="html">&lt;h2&gt;帮助的使用&lt;/h2&gt;
&lt;p&gt;在mysql中，有非常多的命令和变量，往往我们只能记住很小一部分，当不知道改命令的用法，可以使用如下&lt;code&gt;? + command&lt;/code&gt;：    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;SHOW&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会列出所有含有的SHOW的命令，然后，进一步使用?+command来获取具体命令的用法。  &lt;/p&gt;
&lt;h2&gt;存储引擎概述&lt;/h2&gt;
&lt;p&gt;mysql存储引擎包括：MyISAM,InnoDB,BDB,MEMORY,MERGE,EXAMPLE,NDB Cluster等等，在工作中常用的引擎是MyISAM,InnoDB,MEMORY和MERGE。如下表格各个存储引擎的特性：&lt;br /&gt;
&lt;table border="1"&gt;
&lt;th&gt;特性&lt;/th&gt;&lt;th&gt;MyIsam&lt;/th&gt;&lt;th&gt;InnoDB&lt;/th&gt;&lt;th&gt;Memory&lt;/th&gt;&lt;th&gt;BDB&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;存储限制&lt;/td&gt;&lt;td&gt;没有 &lt;/td&gt;&lt;td&gt;64TB &lt;/td&gt;&lt;td&gt;有&lt;/td&gt;&lt;td&gt;没有 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;事物安全&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;支持 &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;支持 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;锁机制&lt;/td&gt;&lt;td&gt;表锁  &lt;/td&gt;&lt;td&gt;行锁&lt;/td&gt;&lt;td&gt;表锁 &lt;/td&gt;&lt;td&gt;页锁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空间使用&lt;/td&gt;&lt;td&gt;低 &lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;没有&lt;/td&gt;&lt;td&gt;底 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存使用&lt;/td&gt;&lt;td&gt;低 &lt;/td&gt;&lt;td&gt;高  &lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;底&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;批量插入速度&lt;/td&gt;&lt;td&gt;高 &lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;高 &lt;/td&gt;&lt;td&gt;高 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持外键&lt;/td&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;支持 &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;MYIsam:是mysql默认的存储引擎，在web是使用非常广泛，对于CRUD执行效率非常高，但是不支持事务处理。&lt;br /&gt;
InnoDB：对事务处理比较擅长。&lt;br /&gt;
Memory：将所有数据保存在RAM中，需要快速检索的时候，可以提供非常高的访问速度。&lt;br /&gt;
Merge：可以将表字段相同的表联合成一张表，在分表的情况下会用到。  &lt;/p&gt;
&lt;h2&gt;选择合适的数据类型&lt;/h2&gt;
&lt;p&gt;1 MyIsam表尽量使用固定长度的数据类型代替可变长度的数据类型&lt;br /&gt;
2 Memory表目前都是使用固定长度的数据类型&lt;br /&gt;
3 InnoDB表使用varchar代替char&lt;br /&gt;
text和blob注意事项：&lt;br /&gt;
1. blob和text是进行大量的更新或者删除操作后，会再数据表中留下大量的“空洞”，建议定期使用optimize table进行碎片整理，以提高性能。&lt;br /&gt;
2. 尽量避免检索大型的text和Blob&lt;br /&gt;
3. 把text和blob分离到单独的表中。使主表保持固定长度的类型。  &lt;/p&gt;
&lt;h2&gt;索引的使用和设计&lt;/h2&gt;
&lt;h3&gt;索引设计原则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用唯一索引。考虑到列中值的分布，对于只唯一的，索引效果更好。  &lt;/li&gt;
&lt;li&gt;使用短索引。对于一个varchar(300)的这种列，如果前20个字符就基本可以确定唯一性，则只需要对前20个值建立索引。较短的索引可以减少磁盘IO，可以提高性能。  &lt;/li&gt;
&lt;li&gt;最经典的最左原则。  &lt;/li&gt;
&lt;li&gt;索引可以用于“&amp;lt;”,“&amp;gt;”,“=”，“&amp;gt;=”，“&amp;lt;=”，“BETWEEN”。在模式具有一个直接前缀的时候，也可用于like运算。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;hash索引和btree索引&lt;/h3&gt;
&lt;p&gt;hash用于=，&amp;lt;=&amp;gt;会比较快&lt;br /&gt;
btree，任何关键字的左前缀都可以用于查找数据  &lt;/p&gt;
&lt;h2&gt;mysql锁机制和事务管理&lt;/h2&gt;
&lt;p&gt;mysql四个事务隔离级别：&lt;br /&gt;
read uncommited ， read commited ， repeatable read ， serializable&lt;br /&gt;
read uncommited 即脏读，一个事务修改了一行，另一个事务也可以读到该行。
如果第一个事务执行了回滚，那么第二个事务读取的就是从来没有正式出现过的值。 
read commited 即一致读，试图通过只读取提交的值的方式来解决脏读的问题，
但是这又引起了不可重复读取的问题。
一个事务执行一个查询，读取了大量的数据行。在它结束读取之前，另一个事务可能完成了对数据行的更改。当第一个事务试图再次执行同一个查询，服务器就会返回不同的结果。
repeatable read 即可重复读，在一个事务对数据行执行读取或写入操作时锁定了这些数据行。
但是这种方式又引发了幻想读的问题。
因为只能锁定读取或写入的行，不能阻止另一个事务插入数据，后期执行同样的查询会产生更多的结果。
serializable 模式中，事务被强制为依次执行。这是 SQL 标准建议的默认行为。&lt;br /&gt;
MySQL 允许利用 set transaction 来设置隔离级别。&lt;br /&gt;
所有存储引擎到支持表锁，但是MyIsam支持表锁&lt;br /&gt;
mysql有两种锁的类型，读锁和写锁&lt;br /&gt;
读锁表示可以并发读&lt;br /&gt;
而写锁是独占的 &lt;br /&gt;
而且需要大并发的读，可以考虑采用InnoDB，因为InnoDB是行级锁（InnoDB很多线程的时候会出现死锁，貌似是bug）。  &lt;/p&gt;
&lt;p&gt;行级锁的优点及选择 ：
1 ）在很多线程请求不同记录时减少冲突锁。&lt;br /&gt;
2 ）事务回滚时减少改变数据。&lt;br /&gt;
3 ）使长时间对单独的一行记录加锁成为可能。  &lt;/p&gt;
&lt;p&gt;行级锁的缺点 ：
1 ）比页级锁和表级锁消耗更多的内存。
2 ）当在大量表中使用时，比页级锁和表级锁更慢，因为他需要请求更多的所资源。
3 ）当需要频繁对大部分数据做 GROUP BY 操作或者需要频繁扫描整个表时，就明显的比其它锁更糟糕。
4 ）使用更高层的锁的话，就能更方便的支持各种不同的类型应用程序，因为这种锁的开销比行级锁小多了。
5 ）可以用应用程序级锁来代替行级锁，例如 MySQL 中的 GET_LOCK() 和 RELEASE_LOCK() 。但它们是劝告锁（原文： These are advisory locks ），因此只能用于安全可信的应用程序中。
6 ）对于 InnoDB 和 BDB 表， MySQL 只有在指定用 LOCK TABLES 锁表时才使用表级锁。在这两种表中，建议最好不要使用 LOCK TABLES ，因为 InnoDB 自动采用行级锁， BDB 用页级锁来保证事务的隔离。&lt;/p&gt;
&lt;p&gt;表锁的优点及选择：
1 ）很多操作都是读表。
2 ）在严格条件的索引上读取和更新，当更新或者删除可以用单独的索引来读取得到时： UPDATE tbl_name SET column=value WHERE unique_key_col=key_value;DELETE FROM tbl_name WHERE unique_key_col=key_value;
3 ） SELECT 和 INSERT 语句并发的执行（表锁可以允许insert和select并发执行），但是只有很少的 UPDATE 和 DELETE 语句。
4 ）很多的扫描表和对全表的 GROUP BY 操作，但是没有任何写表。&lt;/p&gt;
&lt;p&gt;表锁的缺点：
1 ）一个客户端提交了一个需要长时间运行的 SELECT 操作。
2 ）其他客户端对同一个表提交了 UPDATE 操作，这个客户端就要等到 SELECT 完成了才能开始执行。
3 ）其他客户端也对同一个表提交了 SELECT 请求。由于 UPDATE 的优先级高于 SELECT ，所以 SELECT 就会先等到 UPDATE 完成了之后才开始执行，它也在等待第一个 SELECT 操作。  &lt;/p&gt;</summary></entry><entry><title>《黑客与画家》感受</title><link href="http://dnfhujun.github.io/hei-ke-yu-hua-jia-gan-shou.html" rel="alternate"></link><updated>2014-11-10T00:00:00+08:00</updated><author><name>hjboy</name></author><id>tag:dnfhujun.github.io,2014-11-10:hei-ke-yu-hua-jia-gan-shou.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;训练自己去想、质疑那些不能想的事情。  &lt;/li&gt;
&lt;li&gt;书呆子之所以不受欢迎，是因为他们的兴趣点不是怎么去让别人去喜欢你，而且在另一些他们感兴趣的东西。  &lt;/li&gt;
&lt;li&gt;互联网产品快速迭代，不要将所有东西想好后再开始做，有一点想法就马上开始做，并且上线，让用户区检验这个功能，然后进行后续优化。  &lt;/li&gt;
&lt;li&gt;开发团队要竟可能的小，这样会比较灵活。  &lt;/li&gt;
&lt;li&gt;如果想卖互联网产品，至少要提供免费试用。  &lt;/li&gt;
&lt;li&gt;要致富，你需要两样东西：可测量性和可放大行。第一点表示你的职位产生的业绩是可测量的，否则你做得再多，也不会得到更多的报酬。第二点表示你做出的决定能够产生巨大的效用。我的理解就是你的工作能够帮助公司带来很高的收入，并且你自己的工作业绩是可以被领导认可的。  &lt;/li&gt;
&lt;li&gt;创业公司关于如何防止被其他人抄袭的方法，一是设立足够高的壁垒，意思就是只有你能做出来，别人做不出来，二是申请专利。  &lt;/li&gt;
&lt;li&gt;编程语言之间存在巨大的差异，所以在开发一个软件的时候，要谨慎的选择开发语言。有两个标准，一是这个语言将是近二十年来比较流行的语言，二是能够找到合适的程序员，函数库的机会有多大。  &lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>ubuntu安装mysql</title><link href="http://dnfhujun.github.io/ubuntuan-zhuang-mysql.html" rel="alternate"></link><updated>2014-10-21T00:00:00+08:00</updated><author><name>hjboy</name></author><id>tag:dnfhujun.github.io,2014-10-21:ubuntuan-zhuang-mysql.html</id><summary type="html">&lt;p&gt;其实在unbuntu下安装mysql非常简单，只需要执行（需要超级用户的权限）：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是对于ubuntu下，mysql到底安装到哪去了，却找了半天，主要有如下几个目录：  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/mysql&lt;/code&gt;这个目录下存放了mysql的配置文件，默认是&lt;code&gt;my.cnf&lt;/code&gt;。&lt;br /&gt;
&lt;code&gt;/var/lib/mysql&lt;/code&gt;这个目录存放了mysql的物理存储文件和binlog的日志文件。&lt;br /&gt;
&lt;code&gt;/var/log/mysql&lt;/code&gt;这个目录存放了mysql的错误日志的文件。&lt;br /&gt;
&lt;code&gt;/etc/init.d/&lt;/code&gt;这个目录存放了mysql的启动程序，当然也可以通过service的方式启动。&lt;/p&gt;</summary><category term="MySQL，Linux"></category></entry><entry><title>JS 重新加载iframe</title><link href="http://dnfhujun.github.io/js-zhong-xin-jia-zai-iframe.html" rel="alternate"></link><updated>2014-10-15T11:20:00+08:00</updated><author><name>hjboy</name></author><id>tag:dnfhujun.github.io,2014-10-15:js-zhong-xin-jia-zai-iframe.html</id><summary type="html">&lt;p&gt;这两天在做一个需求的时候，需要在提交一个表单的时候，将iframe重新加载下，在google上搜索了许多案例，主要有两种：&lt;br /&gt;
1. 通过&lt;code&gt;window.document.frames['framename'].location.url= XXX&lt;/code&gt; &lt;br /&gt;
2. 通过Jquery来实现：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#iframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#iframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是我的这种比较特殊，我的页面的结构特殊，这种情况并不适用，如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;......
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form-1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/achievement/query.do&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iframe-1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ......
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
......
&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iframe-1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width:85%&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iframe-1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/blank/blank.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;frameborder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;scrolling=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;
     &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;common.resizeIframe(this);parent.common.resizeIframe(parent.$(&amp;#39;#tabs-1 iframe&amp;#39;).get(0));&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是通过一个form表单把数据定向到iframe，如果适用上面两种方式实现的话，这里的&lt;code&gt;${#iframe-1}.attr('src')='/blank/blank.html'&lt;/code&gt;,并不能达到实际的效果，因此适用了另外一种方式实现了iframe的重新加载。&lt;br /&gt;
使用&lt;code&gt;window.frames['framename'].location.reload(true)&lt;/code&gt;可以达到这个效果。因为我的这个页面涉及到父子窗口，正确的使用方式如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iframe-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps:在window.document对象下也有iframes方法，但是貌似有兼容性问题，IE下可以生效，在chrome 不能生效。&lt;/p&gt;</summary><category term="java"></category></entry><entry><title>Windows下使用GITHUB+Pelican搭建个人Blog安装与配置</title><link href="http://dnfhujun.github.io/windowsxia-shi-yong-githubpelicanda-jian-ge-ren-blogan-zhuang-yu-pei-zhi.html" rel="alternate"></link><updated>2014-10-10T00:00:00+08:00</updated><author><name>hjboy</name></author><id>tag:dnfhujun.github.io,2014-10-10:windowsxia-shi-yong-githubpelicanda-jian-ge-ren-blogan-zhuang-yu-pei-zhi.html</id><summary type="html">&lt;h2&gt;准备工作&lt;/h2&gt;
&lt;h3&gt;1. 安装Python&lt;/h3&gt;
&lt;p&gt;到python官网下载Python，最好选择2.7的版本，点击安装，路径如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;C:&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Python27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将python的安装目录加入到path环境变量中。&lt;/p&gt;
&lt;h3&gt;2. 安装setuptools&lt;/h3&gt;
&lt;p&gt;点击&lt;a href="https://pypi.python.org/pypi/setuptools#windows-simplified"&gt;这里&lt;/a&gt;下载&lt;code&gt;ez_setup.py&lt;/code&gt;文件，双击会自动进行setuptools的安装，安装完之后，在C:\Python27\Scripts目录会有一些.exe和.py文件，表明安装完成。&lt;br /&gt;
将C:\Python27\Scripts目录加入到path的环境变量中。  &lt;/p&gt;
&lt;h3&gt;3. Pip安装&lt;/h3&gt;
&lt;p&gt;打开cmd界面，直接输入：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;easy_install&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成安装。  &lt;/p&gt;
&lt;h3&gt;4. Git安装&lt;/h3&gt;
&lt;p&gt;这个不用多说了，直接到官网去下载，安装就行。  &lt;/p&gt;
&lt;h3&gt;5. Pelican安装&lt;/h3&gt;
&lt;p&gt;使用已经安装好的Pip来就行安装Pelican，命令如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6. MarkDown安装&lt;/h3&gt;
&lt;p&gt;如果你希望你的blog支持markdown的语法，可以使用pip安装，如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;7. Make安装&lt;/h3&gt;
&lt;p&gt;百度搜索下Make for Windows 下载.exe文件，随便放到一个目录下，并且将该目录添加到path的环境变量中。&lt;/p&gt;
&lt;h2&gt;Pelican配置&lt;/h2&gt;
&lt;h3&gt;1. 创建项目&lt;/h3&gt;
&lt;p&gt;在F盘创建blog目录，进入该目录，执行pelican-quickstart命令：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;  
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;  
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回答一些问题，能按回车就回车带过，否则，随便写一个就行，但是有一点要注意，就是让你回答&lt;img alt="Alt text" src="/img/1.png" /&gt;&lt;br /&gt;
这个问题的时候，一定要填写一个网址，随便一个网址都行，不然后面会有各种问题。&lt;br /&gt;
命令执行pelican-quickstart完之后，目录结构如下：
&lt;img alt="Alt text" src="/img/2.png" /&gt;&lt;br /&gt;
其中&lt;em&gt;content&lt;/em&gt;是源文件的目录，比如.md文件。
&lt;em&gt;output&lt;/em&gt;是生成静态网页的目录。pelicanconf.py是pelican的配置文件。  &lt;/p&gt;
&lt;h3&gt;2.文件撰写&lt;/h3&gt;
&lt;p&gt;在content目录中，新建first.md文件，编辑如下：   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;  
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;  
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;  
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;  
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;  
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt;  
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;  
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.生成静态页面、本地预览&lt;/h3&gt;
&lt;p&gt;进如blog目录，执行：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成静态网页。执行：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开本地服务器，这时候，在浏览器中输入：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就可以看到效果了。&lt;/p&gt;
&lt;h2&gt;部署到github上&lt;/h2&gt;
&lt;p&gt;首先要登录github，然后新建一个仓库，仓库名为username.github.io(username为你github的用户名)，然后执行如下git的命令。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;first commit&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/xxx/xxx.github.io.git&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行完后，在浏览器中输入&lt;code&gt;http://username.github.io&lt;/code&gt;就可以看到效果了。&lt;br /&gt;
&lt;img alt="img" src="/img/3.png" /&gt;&lt;/p&gt;</summary><category term="pelican"></category><category term="Python"></category></entry></feed>